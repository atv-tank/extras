version: 2.1

jobs:
  build:
    docker:
      - image: ubuntu:mantic-20240530
    steps:
      - checkout
      - run:
          name: Install QEMU, libvirt, and SSH
          command: |
            apt update
            apt install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virtinst cloud-image-utils openssh-client curl
            apt clean
            # Generate SSH key if it doesn't exist
            if [ ! -f ~/.ssh/id_rsa ]; then
              ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N ""
            fi
      - run:
          name: Setup and Run VM with virt-install
          command: |
            mkdir -p /work
            curl -L -o /work/mantic-server-cloudimg-amd64.img https://cloud-images.ubuntu.com/mantic/20240410/mantic-server-cloudimg-amd64.img
            qemu-img resize /work/mantic-server-cloudimg-amd64.img 200G

            # Create preseed file for automated installation
            cat > /work/preseed.cfg /<<EOF
            d-i debian-installer/locale string en_US
            d-i console-setup/ask_detect boolean false
            d-i console-setup/layoutcode string us
            d-i keyboard-configuration/xkb-keymap select us
            d-i netcfg/choose_interface select auto
            d-i netcfg/get_hostname string ubuntu
            d-i netcfg/get_domain string unassigned-domain
            d-i mirror/country string manual
            d-i mirror/http/hostname string archive.ubuntu.com
            d-i mirror/http/directory string /ubuntu
            d-i mirror/http/proxy string
            d-i clock-setup/utc boolean true
            d-i time/zone string Etc/UTC
            d-i partman-auto/method string lvm
            d-i partman-lvm/device_remove_lvm boolean true
            d-i partman-lvm/confirm boolean true
            d-i partman-lvm/confirm_nooverwrite boolean true
            d-i partman-auto/choose_recipe select atomic
            d-i partman/confirm_write_new_label boolean true
            d-i partman/confirm boolean true
            d-i partman/confirm_nooverwrite boolean true
            d-i passwd/root-login boolean false
            d-i passwd/make-user boolean true
            d-i passwd/user-fullname string builduser
            d-i passwd/username string builduser
            d-i passwd/user-password password password
            d-i passwd/user-password-again password password
            d-i user-setup/allow-password-weak boolean true
            d-i user-setup/encrypt-home boolean false
            d-i pkgsel/include string openssh-server
            d-i pkgsel/upgrade select none
            d-i grub-installer/only_debian boolean true
            d-i grub-installer/with_other_os boolean false
            d-i finish-install/reboot_in_progress note
            EOF

            # Create virtual machine using virt-install
            virt-install --name ubuntu-vm --ram 4096 --vcpus 4 --disk path=/work/mantic-server-cloudimg-amd64.img,format=qcow2 --os-type linux --os-variant ubuntu20.04 --graphics none --console pty,target_type=serial --location 'http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/' --extra-args 'console=ttyS0,115200n8 serial' --initrd-inject=/work/preseed.cfg --extra-args "auto=true priority=critical preseed/file=/preseed.cfg"

            sleep 30

            # Verify VM is up and running
            if ! ssh -o StrictHostKeyChecking=no builduser@localhost -p 2222 "echo VM Booted"; then
              echo "VM did not boot correctly"
              exit 1
            fi
      - run:
          name: Install Build Deps in QEMU
          command: |
            ssh -p 2222 -o StrictHostKeyChecking=no builduser@localhost /<< 'EOF'
              sudo apt update
              sudo apt install -y bc python3 procps bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev openjdk-8-jdk openjdk-8-jre
              curl https://storage.googleapis.com/git-repo-downloads/repo > /home/builduser/work/bin/repo
              chmod a+x /home/builduser/work/bin/repo
              ccache -M 50G
            EOF
      - run:
          name: Copy and Run Scripts in VM
          command: |
            scp -P 2222 -o StrictHostKeyChecking=no -r . builduser@localhost:/home/builduser/work
            ssh -p 2222 -o StrictHostKeyChecking=no builduser@localhost /<< 'EOF'
              cd /home/builduser/work
              sudo sysctl -w net.ipv4.tcp_window_scaling=0
              cd /home/builduser/work/android/lineage
              git config --global user.email "shashankspis20@gmail.com"
              git config --global user.name "shashankx86"
              /home/builduser/work/bin/repo init --depth=1 --no-repo-verify -u https://github.com/atv-tank/manifest.git -b cm-14.1 -m default.xml
              /home/builduser/work/bin/repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j8
              export USE_CCACHE=1
              export ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"
              ccache -M 50G
              source build/envsetup.sh
              lunch lineage_tank userdebug
              brunch tank
              cd $OUT
              curl -F "file=@lineage*" https://temp.sh/upload
            EOF
      - run:
          name: Display Logs
          command: |
            ssh -p 2222 -o StrictHostKeyChecking=no builduser@localhost "cat /home/builduser/work/android/lineage/out/build.log"
