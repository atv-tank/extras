version: 2.1

jobs:
  build:
    docker:
      - image: ubuntu:mantic-20240530
    steps:
      - checkout
      - run:
          name: Install QEMU and SSH
          command: |
            apt update
            echo "5" | apt install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virtinst cloud-image-utils openssh-client curl
            apt clean
            # Generate SSH key if it doesn't exist
            if [ ! -f ~/.ssh/id_rsa ]; then
              ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N ""
            fi
      - run:
          name: Setup QEMU VM
          command: |
            export IMAGE="mantic-server-cloudimg-amd64.img"
            export STORAGE="mantic-server-storage.qcow2"
            export USER_DATA="user-data.img"
            export STORAGE_SIZE="250G"
            export MOUNT_POINT="/mnt/newdisk"
            export CLOUD_INIT_DIR="cloud-init"
            
            mkdir -p $CLOUD_INIT_DIR
            curl -L -o mantic-server-cloudimg-amd64.img https://cloud-images.ubuntu.com/mantic/20240410/mantic-server-cloudimg-amd64.img
            # Create cloud-init user data file
            echo "Creating cloud-init user data..."
            cat > $CLOUD_INIT_DIR/user-data \<<EOF
            #cloud-config
            users:
              - name: builder
                ssh-authorized-keys:
                  - $(cat ~/.ssh/id_rsa.pub)
                sudo: ['ALL=(ALL) NOPASSWD:ALL']
                groups: sudo
                password: builder
                chpasswd: { expire: False }
                ssh_pwauth: True
                shell: /bin/bash
            EOF
            
            # Create a 250GB storage disk
            echo "Creating a $STORAGE_SIZE storage disk..."
            qemu-img create -f qcow2 $STORAGE $STORAGE_SIZE
            
            # Create a cloud-init ISO
            echo "Creating cloud-init ISO..."
            cloud-localds $CLOUD_INIT_DIR/$USER_DATA $CLOUD_INIT_DIR/user-data
            
            # Run the QEMU image
            echo "Starting the QEMU image..."
            qemu-system-x86_64 \
              -m 2G \
              -smp 2 \
              -drive file=$IMAGE,format=qcow2 \
              -drive file=$STORAGE,format=qcow2 \
              -drive file=$CLOUD_INIT_DIR/$USER_DATA,format=raw \
              -net nic -net user,hostfwd=tcp::2222-:22 \
              -nographic &
            
            # Wait for the VM to boot
            echo "Waiting for the VM to boot..."
            sleep 60
            
            # Partition the new storage disk
            echo "Partitioning the storage disk..."
            ssh -o StrictHostKeyChecking=no -p 2222 builder@localhost \<< 'EOF'
            echo -e "n\np\n1\n\n\nw" | sudo fdisk /dev/sdb
            EOF
            
            # Format the new partition
            echo "Formatting the new partition..."
            ssh -p 2222 builder@localhost 'sudo mkfs.ext4 /dev/sdb1'
            
            # Mount the new partition
            echo "Mounting the new partition..."
            ssh -p 2222 builder@localhost \<< EOF
            sudo mkdir -p $MOUNT_POINT
            sudo mount /dev/sdb1 $MOUNT_POINT
            EOF
            
            # Get the UUID of the new partition
            echo "Getting the UUID of the new partition..."
            UUID=$(ssh -p 2222 builder@localhost 'sudo blkid -s UUID -o value /dev/sdb1')
            
            # Add entry to /etc/fstab for persistent mount
            echo "Adding entry to /etc/fstab..."
            ssh -p 2222 builder@localhost \<< EOF
            echo "UUID=$UUID $MOUNT_POINT ext4 defaults 0 2" | sudo tee -a /etc/fstab
            sudo mount -a
            EOF
            
            echo "Setup complete."
      - run:
          name: Install Build Deps in QEMU
          command: |
            ssh -p 2222 -o StrictHostKeyChecking=no builduser@localhost \<< 'EOF'
              mkdir -p $MOUNT_POINT/work
              mkdir -p $MOUNT_POINT/work/android/lineage
              sudo apt update
              sudo apt install -y bc python3 procps bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev openjdk-8-jdk openjdk-8-jre
              curl https://storage.googleapis.com/git-repo-downloads/repo > /home/builduser/work/bin/repo
              chmod a+x /home/builduser/work/bin/repo
              ccache -M 50G
            EOF
      - run:
          name: Copy and Run Scripts in VM
          command: |
            scp -P 2222 -o StrictHostKeyChecking=no -r . builduser@localhost:/home/builduser/work
            ssh -p 2222 -o StrictHostKeyChecking=no builduser@localhost \<< 'EOF'
              cd $MOUNT_POINT/work
              sudo sysctl -w net.ipv4.tcp_window_scaling=0
              cd $MOUNT_POINT/work/android/lineage
              git config --global user.email "shashankspis20@gmail.com"
              git config --global user.name "shashankx86"
              /home/builduser/work/bin/repo init --depth=1 --no-repo-verify -u https://github.com/atv-tank/manifest.git -b cm-14.1 -m default.xml
              /home/builduser/work/bin/repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j8
              export USE_CCACHE=1
              export ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"
              ccache -M 50G
              source build/envsetup.sh
              lunch lineage_tank userdebug
              brunch tank
              cd $OUT
              curl -F "file=@lineage*" https://temp.sh/upload
            EOF
      - run:
          name: Display Logs
          command: |
            ssh -p 2222 -o StrictHostKeyChecking=no builduser@localhost "cat /home/builduser/work/android/lineage/out/build.log"
